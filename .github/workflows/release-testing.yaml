name: Release - Testing
on:
  pull_request:
    branches:
      - master
    # FIXME: Uncomment
    # paths:
    #   - VERSION

env:
  # https://github.com/CartoDB/carto3-onprem-customers/tree/master/customers/infra-release
  ENVIRONMENT: production
  GOOGLE_PROJECT_ID: carto-tnt-onp-infra-release
  TENANT_ID: onp-infra-release
jobs:
  release-testing:
    runs-on: ubuntu-20.04
    name: "Release - Testing"
    timeout-minutes: 60

    steps:
      - name: Checkout project
        uses: actions/checkout@v3

      - name: Install Docker compose
        uses: KengoTODA/actions-setup-docker-compose@main
        with:
          version: "2.5.1"

      - name: Ngrok tunnel
        id: ngrok-tunnel
        env:
          NGROK_TOKEN: "29NYgOc10QWedcikUSnpV9F1e5w_4hkpEs8iausqQQMEuinKL"
        run: |
          set -xeu

          # Install ngrok
          cd /tmp
          curl -sSL -O https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz
          sudo tar -zxvf ngrok-v3-stable-linux-amd64.tgz -C /usr/local/bin &>/dev/null
          cd -

          ngrok version
          ngrok http 443 \
            --log=stdout \
            --authtoken="${NGROK_TOKEN}" \
            > ngrok.log &

          sleep 3

          # Obtain ngrok random generated URL
          URL="$(curl -sqSL http://localhost:4040/api/tunnels | jq -r ".tunnels[0].public_url")"
          # Remove protocol
          URL_WITHOUT_PROTOCOL="${URL//https:\/\/}"

          echo "::set-output name=ngrok-url::${URL}"
          echo "::set-output name=ngrok-url-without-protocol::${URL_WITHOUT_PROTOCOL}"

      - name: Google Cloud Auth
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.SELFHOSTED_RELEASE_SERVICE_ACCOUNT }}
          project_id: ${{ env.GOOGLE_PROJECT_ID }}

      - name: Retrieve Selfhosted customer package
        id: customer-package
        uses: google-github-actions/get-secretmanager-secrets@v0
        with:
          secrets: |
            CUSTOMER_ENV:projects/${{ env.GOOGLE_PROJECT_ID }}/secrets/onprem-customer-package
            KEY_JSON:projects/${{ env.GOOGLE_PROJECT_ID }}/secrets/onprem-customer-service-account

      - name: Prepare Docker environment
        env:
          CUSTOMER_ENV: ${{ steps.customer-package.outputs.CUSTOMER_ENV }}
          KEY_JSON: ${{ steps.customer-package.outputs.KEY_JSON }}
          NGROK_URL: ${{ steps.ngrok-tunnel.outputs.ngrok-url-without-protocol }}
        run: |
          set -e
          echo Testing Selfhosted version: $(cat VERSION)

          echo "${CUSTOMER_ENV}" > customer.env
          echo "${KEY_JSON}" > key.json

          # Set ngrok tunnel URL as SELFHOSTED_DOMAIN
          sed -Ei "s/^SELFHOSTED_DOMAIN=.+$/SELFHOSTED_DOMAIN=${NGROK_URL}/" customer.env

          echo "::group::Run install.sh"
          bash install.sh
          echo "::endgroup::"

      - name: Bring up Docker environment
        run: |
          set -e
          docker-compose version
          docker version

          echo "::group::Pulling Docker images"
          docker-compose pull
          echo "::endgroup::"

          echo "::group::Docker images"
          docker image list
          echo "::endgroup::"

          echo "::group::Docker compose up"
          docker-compose up -d
          echo "::endgroup::"

          echo "::group::Docker containers"
          docker container list
          echo "::endgroup::"

      # E2E test
      - name: Checkout cloud-native repository
        uses: actions/checkout@v3
        with:
          # FIXME:
          ref: feature/sc-170633/run-tests-e2e-along-with-the-release-process
          repository: CartoDB/cloud-native
          path: cloud-native
          token: ${{ secrets.X_GITHUB_CARTOFANTE }} # token: carto-selfhosted

      - name: Generate env-info
        id: env-info
        uses: ./cloud-native/.github/actions/env-info
        with:
          environment: ${{ env.ENVIRONMENT }}
          tenant-id: ${{ env.TENANT_ID }}

      - name: Test e2e
        uses: ./cloud-native/.github/actions/e2e-tests
        with:
          carto3-workspace-url: ${{ steps.ngrok-tunnel.outputs.ngrok-url }}
          carto3-tenant-id: ${{ env.TENANT_ID }}
          secrets-service-account: ${{ secrets.SELFHOSTED_RELEASE_SERVICE_ACCOUNT }}
          secrets-manager-path: ${{ steps.env-info.outputs.e2e-secrets-manager-path }}
          base-variable-file: "workspace-www/${{ steps.env-info.outputs.workspace-www-url-env-vars-file-relative-path }}"
          # FIXME:
          github-custom-sha: feature/sc-170633/run-tests-e2e-along-with-the-release-process

      # TODO: Put a message in the PR?

      - name: Create PR message
        id: pr-message
        if: always()
        env:
          JOB_STATUS: ${{ job.status }}
        run: |
          set -xeu
          if [[ "${JOB_STATUS}" == "success" ]];then
            MESSAGE=":white_check_mark: Tests passed"
          else
            MESSAGE=":x: Something went wrong with tests"
          fi
          echo "::set-output name=message::${MESSAGE}"

      - name: Comment PR
        uses: thollander/actions-comment-pull-request@v1
        if: always()
        with:
          message: ${{ steps.pr-message.outputs.message }}
          GITHUB_TOKEN: ${{ secrets.X_GITHUB_CARTOFANTE }}

      # TODO: Automerge PR if success

      - name: Update PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.X_GITHUB_CARTOFANTE }} # token: cloud_native
          script: |
            const { repo: { owner, repo }  } = context;
            const issue_number = ${{ github.event.number }};
            const user_responsible = context.actor;

            // Add labels
            console.log("Adding labels");
            await github.rest.issues.addLabels({
              issue_number: issue_number,
              owner: owner,
              repo: repo,
              labels: ["infra"]
            });

            // Add asignee
            console.log("Adding assignees");
            await github.rest.issues.addAssignees({
              owner: owner,
              repo: repo,
              issue_number: issue_number,
              assignees: ["supercartofante"]
            });

            // Add reviewer
            console.log("Adding Reviewers");
            await github.rest.pulls.requestReviewers({
              owner: owner,
              repo: repo,
              pull_number: issue_number,
              reviewers: ["supercartofante"]
            });

            // Create review
            console.log("Creating Review");
            review = await github.rest.pulls.createReview({
              owner: owner,
              repo: repo,
              pull_number: issue_number
            });

            // Approve PR
            console.log("Approving PR");
            await github.rest.pulls.submitReview({
              owner: owner,
              repo: repo,
              pull_number: issue_number,
              event: "APPROVE",
              review_id: review.data.id,
              body: ":robot: Nice code _beep_ _boop_"
            });

            // Merge PR
            // console.log("Merging automatically");
            // await github.rest.pulls.merge({
            //   owner: owner,
            //   repo: repo,
            //   pull_number: issue_number,
            //   merge_method: "merge"
            // });

      # Failure

      # FIXME:
      # - name: Clean up orgs & Auth0 users
      #   if: failure()
      #   uses: ./cloud-native/.github/actions/tests-cleaning
      #   with:
      #     environment: "${{ env.ENVIRONMENT }}"
      #     registry-service-account-base64: ${{ secrets.SELFHOSTED_RELEASE_SERVICE_ACCOUNT_BASE64 }}
      #     secrets-service-account: ${{ secrets.SELFHOSTED_RELEASE_SERVICE_ACCOUNT_BASE64 }}

      - name: Ngrok logs
        if: failure()
        run: |
          echo "::group::Ngrok logs"
          cat ngrok.log
          echo "::endgroup::"

      - name: Containers logs
        if: failure()
        run: |
          echo "::group::Containers General status"
          docker-compose ps -a
          echo "::endgroup::"
          ALL_CONTAINERS=$(docker-compose ps -a --format json | jq  '.[] | .Name' -r)
          for con in ${ALL_CONTAINERS}; do
            echo "::group::Container ${con}"
            docker logs --timestamps ${con}
            echo "::endgroup::"
          done
