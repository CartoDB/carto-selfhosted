name: Release - Testing
on:
  pull_request:
    branches:
      - master
    paths:
      - VERSION

# Only 1 concurrent execution in all the repository
concurrency: self-hosted-${{ github.repository }}

env:
  # https://github.com/CartoDB/carto3-onprem-customers/tree/master/customers/infra-release
  ENVIRONMENT: production
  GOOGLE_PROJECT_ID: carto-tnt-onp-infra-release
  TENANT_ID: onp-infra-release
jobs:
  release-testing:
    runs-on: ubuntu-20.04
    name: "Release - Testing"
    timeout-minutes: 90
    outputs:
      release-version: ${{ steps.info.outputs.release-version }}
    steps:
      - name: Checkout project
        uses: actions/checkout@v3

      - name: Google Cloud Auth
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.SELFHOSTED_RELEASE_SERVICE_ACCOUNT }}
          project_id: ${{ env.GOOGLE_PROJECT_ID }}

      - name: Retrieve Release Version
        id: info
        run: echo "::set-output name=release-version::$(cat VERSION)"

      - name: Retrieve Selfhosted customer package and Ngrok token
        id: secrets
        uses: google-github-actions/get-secretmanager-secrets@v0
        with:
          secrets: |-
            NGROK_TOKEN:projects/${{ env.GOOGLE_PROJECT_ID }}/secrets/carto3-ngrok-token
            CUSTOMER_ENV:projects/${{ env.GOOGLE_PROJECT_ID }}/secrets/onprem-customer-package
            KEY_JSON:projects/${{ env.GOOGLE_PROJECT_ID }}/secrets/onprem-customer-service-account

      # NOTE: Only 1 tunnel can be opened at the same time
      - name: Ngrok tunnel
        id: ngrok-tunnel
        env:
          NGROK_TOKEN: ${{ steps.secrets.outputs.NGROK_TOKEN }}
        run: |
          set -xeu

          # Install ngrok
          cd /tmp
          curl -sSL -O https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz
          sudo tar -zxvf ngrok-v3-stable-linux-amd64.tgz -C /usr/local/bin
          cd -

          ngrok version
          ngrok http 443 \
            --log=stdout \
            --authtoken="${NGROK_TOKEN}" \
            > ngrok.log &

          sleep 3

          # Obtain ngrok random generated URL
          URL="$(curl -sqSL http://localhost:4040/api/tunnels | jq -r ".tunnels[0].public_url")"
          # Remove protocol
          URL_WITHOUT_PROTOCOL="${URL//https:\/\/}"

          echo "::set-output name=ngrok-url::${URL}"
          echo "::set-output name=ngrok-url-without-protocol::${URL_WITHOUT_PROTOCOL}"

      - name: Install Docker compose
        uses: KengoTODA/actions-setup-docker-compose@main
        with:
          version: "2.5.1"

      - name: Prepare Docker environment
        env:
          CUSTOMER_ENV: ${{ steps.secrets.outputs.CUSTOMER_ENV }}
          KEY_JSON: ${{ steps.secrets.outputs.KEY_JSON }}
          NGROK_URL: ${{ steps.ngrok-tunnel.outputs.ngrok-url-without-protocol }}
        run: |
          set -xeu
          echo Testing Selfhosted version: $(cat VERSION)

          echo "${CUSTOMER_ENV}" > customer.env
          echo "${KEY_JSON}" > key.json

          # Set ngrok tunnel URL as SELFHOSTED_DOMAIN
          sed -Ei "s/^SELFHOSTED_DOMAIN=.+$/SELFHOSTED_DOMAIN=${NGROK_URL}/" customer.env

          echo "::group::Run install.sh"
          bash install.sh
          echo "::endgroup::"

      - name: Bring up Docker environment
        run: |
          set -eu
          docker-compose version
          docker version

          echo "::group::Pulling Docker images"
          docker-compose pull
          echo "::endgroup::"

          echo "::group::Docker images"
          docker image list
          echo "::endgroup::"

          echo "::group::Docker compose up"
          docker-compose up -d
          echo "::endgroup::"

          echo "::group::Docker containers"
          docker container list
          echo "::endgroup::"

      # Tests
      - name: Checkout cloud-native repository
        uses: actions/checkout@v3
        with:
          repository: CartoDB/cloud-native
          fetch-depth: 0 # Fetch the tags
          path: cloud-native
          token: ${{ secrets.X_GITHUB_CARTOFANTE }}

      # This tag and commit are from cloud-native repository
      - name: Get SHA commit associated to the release tag
        id: git-info
        env:
          RELEASE_VERSION: ${{ steps.info.outputs.release-version }}
        working-directory: cloud-native
        run: |
          echo "::set-output name=git-tag-sha::$(git rev-parse ${RELEASE_VERSION})"

      # Integration tests
      - name: Integration Tests
        id: integration-tests
        uses: ./cloud-native/.github/actions/integration-tests
        with:
          registry-service-account-base64: ${{ secrets.SELFHOSTED_RELEASE_SERVICE_ACCOUNT_BASE64 }}
          docker-tag: ${{ steps.info.outputs.release-version }}
          environment: production
          mount-local-env: false
          carto3-tenant-id: ${{ env.TENANT_ID }}
          direct-apis-access: false
          carto3-workspace-www-url: ${{ steps.ngrok-tunnel.outputs.ngrok-url }}
          carto3-workspace-api-url: ${{ steps.ngrok-tunnel.outputs.ngrok-url }}/workspace-api
          carto3-maps-api-url: ${{ steps.ngrok-tunnel.outputs.ngrok-url }}/api
          carto3-maps-api-direct-url: ${{ steps.ngrok-tunnel.outputs.ngrok-url }}/api
          carto3-import-api-url: ${{ steps.ngrok-tunnel.outputs.ngrok-url }}/api

      - name: Clean up orgs & Auth0 users for Integration Tests
        if: always()
        uses: ./cloud-native/.github/actions/tests-cleaning
        with:
          environment: ${{ env.ENVIRONMENT }}
          registry-service-account-base64: ${{ secrets.SELFHOSTED_RELEASE_SERVICE_ACCOUNT_BASE64 }}
          secrets-service-account: ${{ secrets.SELFHOSTED_RELEASE_SERVICE_ACCOUNT_BASE64 }}

      # E2E test
      - name: Generate env-info
        id: env-info
        uses: ./cloud-native/.github/actions/env-info
        with:
          environment: ${{ env.ENVIRONMENT }}
          tenant-id: ${{ env.TENANT_ID }}

      - name: Test e2e
        uses: ./cloud-native/.github/actions/e2e-tests
        with:
          carto3-workspace-url: ${{ steps.ngrok-tunnel.outputs.ngrok-url }}
          carto3-tenant-id: ${{ env.TENANT_ID }}
          secrets-service-account: ${{ secrets.SELFHOSTED_RELEASE_SERVICE_ACCOUNT }}
          secrets-manager-path: ${{ steps.env-info.outputs.e2e-secrets-manager-path }}
          base-variable-file: "workspace-www/${{ steps.env-info.outputs.workspace-www-url-env-vars-file-relative-path }}"
          github-custom-sha: ${{ steps.git-info.outputs.git-tag-sha }}

      - name: Clean up orgs & Auth0 users for E2E
        if: always()
        uses: ./cloud-native/.github/actions/tests-cleaning
        with:
          environment: ${{ env.ENVIRONMENT }}
          registry-service-account-base64: ${{ secrets.SELFHOSTED_RELEASE_SERVICE_ACCOUNT_BASE64 }}
          secrets-service-account: ${{ secrets.SELFHOSTED_RELEASE_SERVICE_ACCOUNT_BASE64 }}
          override-run-id: "${{ github.repository }}:${{ github.run_id }}[${{ github.run_attempt }}]"

      # In case of Failure
      - name: Ngrok logs
        if: failure()
        run: |
          echo "::group::Ngrok logs"
          cat ngrok.log
          echo "::endgroup::"

      - name: Containers logs
        if: failure()
        run: |
          echo "::group::Containers General status"
          docker-compose ps -a
          echo "::endgroup::"
          ALL_CONTAINERS=$(docker-compose ps -a --format json | jq  '.[] | .Name' -r)
          for con in ${ALL_CONTAINERS}; do
            echo "::group::Container ${con}"
            docker logs --timestamps ${con}
            echo "::endgroup::"
          done

  auto-merge-pr:
    runs-on: ubuntu-20.04
    name: "Automerge PR"
    if: success()
    needs:
      - release-testing
    steps:
      - name: Checkout cloud-native repository
        uses: actions/checkout@v3
        with:
          repository: CartoDB/cloud-native
          path: cloud-native
          token: ${{ secrets.X_GITHUB_CARTOFANTE }}

      # FIXME: Uncomment when stable
      # - name: Automerge PR
      #   uses: ./cloud-native/.github/actions/automerge-pr
      #   with:
      #     github-token: ${{ secrets.X_GITHUB_CARTOFANTE }} # token: carto_selfhosted
      #     github-user: cartofante
      #     pr-number: ${{ github.event.pull_request.number }}

  notify-errors:
    runs-on: ubuntu-20.04
    name: "Notify errors"
    if: failure()
    needs:
      - release-testing
    env:
      RELEASE_VERSION: ${{ needs.release-testing.outputs.release-version }}
    steps:
      - name: Add comment in PR
        uses: peter-evans/create-or-update-comment@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            :x: Something went wrong testing the new `${{ env.RELEASE_VERSION }}` release. Please, check the associated [GHAction logs](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}).

      - name: Slack notification (#carto-selfhosted)
        env:
          SLACK_CHANNEL: C02PADFM0E4 #carto-selfhosted
        run: |
          curl -F "text=:x: Something went wrong testing the new \`${{ env.RELEASE_VERSION }}\` release in \`carto-selfhosted\`. Please take a look
           - *<${{github.event.pull_request.html_url}}|Pull Request Docker>*
           - *<https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}|GHAction Logs>*" \
            -F "channel=${SLACK_CHANNEL}" \
            -H "Authorization: Bearer ${{ secrets.SLACK_KEY }}" \
            -X POST https://slack.com/api/chat.postMessage
